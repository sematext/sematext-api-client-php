<?php
/**
 * SavedQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use \ArrayAccess;
use \sematext\stcloud\ObjectSerializer;

/**
 * SavedQuery Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavedQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SavedQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alert_rule' => '\sematext\stcloud\Model\AlertRule',
        'allow_modification' => 'bool',
        'application_id' => 'string',
        'application_name' => 'string',
        'application_token' => 'string',
        'creator_email' => 'string',
        'id' => 'string',
        'label_color' => 'string',
        'logsene_alert_type' => 'object',
        'owner_email' => 'string',
        'query_name' => 'string',
        'query_string' => 'string',
        'user_permissions' => '\sematext\stcloud\Model\UserPermissions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alert_rule' => null,
        'allow_modification' => null,
        'application_id' => null,
        'application_name' => null,
        'application_token' => null,
        'creator_email' => null,
        'id' => null,
        'label_color' => null,
        'logsene_alert_type' => null,
        'owner_email' => null,
        'query_name' => null,
        'query_string' => null,
        'user_permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_rule' => 'alertRule',
        'allow_modification' => 'allowModification',
        'application_id' => 'applicationId',
        'application_name' => 'applicationName',
        'application_token' => 'applicationToken',
        'creator_email' => 'creatorEmail',
        'id' => 'id',
        'label_color' => 'labelColor',
        'logsene_alert_type' => 'logseneAlertType',
        'owner_email' => 'ownerEmail',
        'query_name' => 'queryName',
        'query_string' => 'queryString',
        'user_permissions' => 'userPermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_rule' => 'setAlertRule',
        'allow_modification' => 'setAllowModification',
        'application_id' => 'setApplicationId',
        'application_name' => 'setApplicationName',
        'application_token' => 'setApplicationToken',
        'creator_email' => 'setCreatorEmail',
        'id' => 'setId',
        'label_color' => 'setLabelColor',
        'logsene_alert_type' => 'setLogseneAlertType',
        'owner_email' => 'setOwnerEmail',
        'query_name' => 'setQueryName',
        'query_string' => 'setQueryString',
        'user_permissions' => 'setUserPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_rule' => 'getAlertRule',
        'allow_modification' => 'getAllowModification',
        'application_id' => 'getApplicationId',
        'application_name' => 'getApplicationName',
        'application_token' => 'getApplicationToken',
        'creator_email' => 'getCreatorEmail',
        'id' => 'getId',
        'label_color' => 'getLabelColor',
        'logsene_alert_type' => 'getLogseneAlertType',
        'owner_email' => 'getOwnerEmail',
        'query_name' => 'getQueryName',
        'query_string' => 'getQueryString',
        'user_permissions' => 'getUserPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_rule'] = isset($data['alert_rule']) ? $data['alert_rule'] : null;
        $this->container['allow_modification'] = isset($data['allow_modification']) ? $data['allow_modification'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['application_name'] = isset($data['application_name']) ? $data['application_name'] : null;
        $this->container['application_token'] = isset($data['application_token']) ? $data['application_token'] : null;
        $this->container['creator_email'] = isset($data['creator_email']) ? $data['creator_email'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label_color'] = isset($data['label_color']) ? $data['label_color'] : null;
        $this->container['logsene_alert_type'] = isset($data['logsene_alert_type']) ? $data['logsene_alert_type'] : null;
        $this->container['owner_email'] = isset($data['owner_email']) ? $data['owner_email'] : null;
        $this->container['query_name'] = isset($data['query_name']) ? $data['query_name'] : null;
        $this->container['query_string'] = isset($data['query_string']) ? $data['query_string'] : null;
        $this->container['user_permissions'] = isset($data['user_permissions']) ? $data['user_permissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_rule
     *
     * @return \sematext\stcloud\Model\AlertRule
     */
    public function getAlertRule()
    {
        return $this->container['alert_rule'];
    }

    /**
     * Sets alert_rule
     *
     * @param \sematext\stcloud\Model\AlertRule $alert_rule alert_rule
     *
     * @return $this
     */
    public function setAlertRule($alert_rule)
    {
        $this->container['alert_rule'] = $alert_rule;

        return $this;
    }

    /**
     * Gets allow_modification
     *
     * @return bool
     */
    public function getAllowModification()
    {
        return $this->container['allow_modification'];
    }

    /**
     * Sets allow_modification
     *
     * @param bool $allow_modification allow_modification
     *
     * @return $this
     */
    public function setAllowModification($allow_modification)
    {
        $this->container['allow_modification'] = $allow_modification;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string $application_id application_id
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string $application_name application_name
     *
     * @return $this
     */
    public function setApplicationName($application_name)
    {
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets application_token
     *
     * @return string
     */
    public function getApplicationToken()
    {
        return $this->container['application_token'];
    }

    /**
     * Sets application_token
     *
     * @param string $application_token application_token
     *
     * @return $this
     */
    public function setApplicationToken($application_token)
    {
        $this->container['application_token'] = $application_token;

        return $this;
    }

    /**
     * Gets creator_email
     *
     * @return string
     */
    public function getCreatorEmail()
    {
        return $this->container['creator_email'];
    }

    /**
     * Sets creator_email
     *
     * @param string $creator_email creator_email
     *
     * @return $this
     */
    public function setCreatorEmail($creator_email)
    {
        $this->container['creator_email'] = $creator_email;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label_color
     *
     * @return string
     */
    public function getLabelColor()
    {
        return $this->container['label_color'];
    }

    /**
     * Sets label_color
     *
     * @param string $label_color label_color
     *
     * @return $this
     */
    public function setLabelColor($label_color)
    {
        $this->container['label_color'] = $label_color;

        return $this;
    }

    /**
     * Gets logsene_alert_type
     *
     * @return object
     */
    public function getLogseneAlertType()
    {
        return $this->container['logsene_alert_type'];
    }

    /**
     * Sets logsene_alert_type
     *
     * @param object $logsene_alert_type logsene_alert_type
     *
     * @return $this
     */
    public function setLogseneAlertType($logsene_alert_type)
    {
        $this->container['logsene_alert_type'] = $logsene_alert_type;

        return $this;
    }

    /**
     * Gets owner_email
     *
     * @return string
     */
    public function getOwnerEmail()
    {
        return $this->container['owner_email'];
    }

    /**
     * Sets owner_email
     *
     * @param string $owner_email owner_email
     *
     * @return $this
     */
    public function setOwnerEmail($owner_email)
    {
        $this->container['owner_email'] = $owner_email;

        return $this;
    }

    /**
     * Gets query_name
     *
     * @return string
     */
    public function getQueryName()
    {
        return $this->container['query_name'];
    }

    /**
     * Sets query_name
     *
     * @param string $query_name query_name
     *
     * @return $this
     */
    public function setQueryName($query_name)
    {
        $this->container['query_name'] = $query_name;

        return $this;
    }

    /**
     * Gets query_string
     *
     * @return string
     */
    public function getQueryString()
    {
        return $this->container['query_string'];
    }

    /**
     * Sets query_string
     *
     * @param string $query_string query_string
     *
     * @return $this
     */
    public function setQueryString($query_string)
    {
        $this->container['query_string'] = $query_string;

        return $this;
    }

    /**
     * Gets user_permissions
     *
     * @return \sematext\stcloud\Model\UserPermissions
     */
    public function getUserPermissions()
    {
        return $this->container['user_permissions'];
    }

    /**
     * Sets user_permissions
     *
     * @param \sematext\stcloud\Model\UserPermissions $user_permissions user_permissions
     *
     * @return $this
     */
    public function setUserPermissions($user_permissions)
    {
        $this->container['user_permissions'] = $user_permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
