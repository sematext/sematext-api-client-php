<?php
/**
 * UpdateAppInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateAppInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateAppInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateAppInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'ignore_percentage' => 'int',
        'max_events' => 'int',
        'max_limit_mb' => 'int',
        'name' => 'string',
        'sampling' => 'bool',
        'sampling_percentage' => 'int',
        'staggering' => 'bool',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'ignore_percentage' => 'int32',
        'max_events' => 'int64',
        'max_limit_mb' => 'int64',
        'name' => null,
        'sampling' => null,
        'sampling_percentage' => 'int32',
        'staggering' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'ignore_percentage' => 'ignorePercentage',
        'max_events' => 'maxEvents',
        'max_limit_mb' => 'maxLimitMB',
        'name' => 'name',
        'sampling' => 'sampling',
        'sampling_percentage' => 'samplingPercentage',
        'staggering' => 'staggering',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'ignore_percentage' => 'setIgnorePercentage',
        'max_events' => 'setMaxEvents',
        'max_limit_mb' => 'setMaxLimitMb',
        'name' => 'setName',
        'sampling' => 'setSampling',
        'sampling_percentage' => 'setSamplingPercentage',
        'staggering' => 'setStaggering',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'ignore_percentage' => 'getIgnorePercentage',
        'max_events' => 'getMaxEvents',
        'max_limit_mb' => 'getMaxLimitMb',
        'name' => 'getName',
        'sampling' => 'getSampling',
        'sampling_percentage' => 'getSamplingPercentage',
        'staggering' => 'getStaggering',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_DISABLED = 'DISABLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ignore_percentage'] = isset($data['ignore_percentage']) ? $data['ignore_percentage'] : null;
        $this->container['max_events'] = isset($data['max_events']) ? $data['max_events'] : null;
        $this->container['max_limit_mb'] = isset($data['max_limit_mb']) ? $data['max_limit_mb'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sampling'] = isset($data['sampling']) ? $data['sampling'] : null;
        $this->container['sampling_percentage'] = isset($data['sampling_percentage']) ? $data['sampling_percentage'] : null;
        $this->container['staggering'] = isset($data['staggering']) ? $data['staggering'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ignore_percentage
     *
     * @return int
     */
    public function getIgnorePercentage()
    {
        return $this->container['ignore_percentage'];
    }

    /**
     * Sets ignore_percentage
     *
     * @param int $ignore_percentage ignore_percentage
     *
     * @return $this
     */
    public function setIgnorePercentage($ignore_percentage)
    {
        $this->container['ignore_percentage'] = $ignore_percentage;

        return $this;
    }

    /**
     * Gets max_events
     *
     * @return int
     */
    public function getMaxEvents()
    {
        return $this->container['max_events'];
    }

    /**
     * Sets max_events
     *
     * @param int $max_events max_events
     *
     * @return $this
     */
    public function setMaxEvents($max_events)
    {
        $this->container['max_events'] = $max_events;

        return $this;
    }

    /**
     * Gets max_limit_mb
     *
     * @return int
     */
    public function getMaxLimitMb()
    {
        return $this->container['max_limit_mb'];
    }

    /**
     * Sets max_limit_mb
     *
     * @param int $max_limit_mb max_limit_mb
     *
     * @return $this
     */
    public function setMaxLimitMb($max_limit_mb)
    {
        $this->container['max_limit_mb'] = $max_limit_mb;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sampling
     *
     * @return bool
     */
    public function getSampling()
    {
        return $this->container['sampling'];
    }

    /**
     * Sets sampling
     *
     * @param bool $sampling sampling
     *
     * @return $this
     */
    public function setSampling($sampling)
    {
        $this->container['sampling'] = $sampling;

        return $this;
    }

    /**
     * Gets sampling_percentage
     *
     * @return int
     */
    public function getSamplingPercentage()
    {
        return $this->container['sampling_percentage'];
    }

    /**
     * Sets sampling_percentage
     *
     * @param int $sampling_percentage sampling_percentage
     *
     * @return $this
     */
    public function setSamplingPercentage($sampling_percentage)
    {
        $this->container['sampling_percentage'] = $sampling_percentage;

        return $this;
    }

    /**
     * Gets staggering
     *
     * @return bool
     */
    public function getStaggering()
    {
        return $this->container['staggering'];
    }

    /**
     * Sets staggering
     *
     * @param bool $staggering staggering
     *
     * @return $this
     */
    public function setStaggering($staggering)
    {
        $this->container['staggering'] = $staggering;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


