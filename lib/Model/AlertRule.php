<?php
/**
 * AlertRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AlertRule Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlertRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlertRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_email' => 'string',
        'allowed_app_types' => 'int[]',
        'analyzing_time' => 'string',
        'app_display_state' => 'string',
        'app_id' => 'int',
        'app_name' => 'string',
        'app_state' => 'string',
        'app_token' => 'string',
        'app_type' => 'string',
        'back_to_normal_needed' => 'bool',
        'chart_key' => 'string',
        'color' => 'string',
        'creator_email' => 'string',
        'default_agg_type' => 'string',
        'description' => 'string',
        'disallowed_app_types' => 'int[]',
        'enabled' => 'bool',
        'estimate_operation' => 'string',
        'estimate_value' => 'double',
        'filter_values' => 'string',
        'filter_values_obj' => '\Swagger\Client\Model\FilterValue[]',
        'ignore_regular_events_enabled' => 'bool',
        'integrations' => 'string',
        'last_data_received_date' => 'int',
        'last_sent' => 'int',
        'last_triggered' => 'int',
        'metadata' => 'object',
        'metric_key' => 'string',
        'metric_label' => 'string',
        'min_delay_between_notifications_in_minutes' => 'string',
        'name' => 'string',
        'notification_emails' => 'string[]',
        'notification_integrations' => '\Swagger\Client\Model\NotificationIntegration[]',
        'notifications_enabled' => 'bool',
        'query' => 'string',
        'report_name' => 'string',
        'rule_key' => 'int',
        'rule_type' => 'string',
        'runbook' => 'string',
        'saved_query_id' => 'int',
        'schedule' => '\Swagger\Client\Model\AlertRuleScheduleWeekdayDto[]',
        'sematext_service' => 'string',
        'send_to_email' => 'string',
        'timezone' => 'string',
        'use_only_alert_rule_integrations' => 'bool',
        'user_permissions' => '\Swagger\Client\Model\UserPermissions',
        'value_column_name' => 'string',
        'value_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_email' => null,
        'allowed_app_types' => 'int64',
        'analyzing_time' => null,
        'app_display_state' => null,
        'app_id' => 'int64',
        'app_name' => null,
        'app_state' => null,
        'app_token' => null,
        'app_type' => null,
        'back_to_normal_needed' => null,
        'chart_key' => null,
        'color' => null,
        'creator_email' => null,
        'default_agg_type' => null,
        'description' => null,
        'disallowed_app_types' => 'int64',
        'enabled' => null,
        'estimate_operation' => null,
        'estimate_value' => 'double',
        'filter_values' => null,
        'filter_values_obj' => null,
        'ignore_regular_events_enabled' => null,
        'integrations' => null,
        'last_data_received_date' => 'int64',
        'last_sent' => 'int64',
        'last_triggered' => 'int64',
        'metadata' => null,
        'metric_key' => null,
        'metric_label' => null,
        'min_delay_between_notifications_in_minutes' => null,
        'name' => null,
        'notification_emails' => null,
        'notification_integrations' => null,
        'notifications_enabled' => null,
        'query' => null,
        'report_name' => null,
        'rule_key' => 'int64',
        'rule_type' => null,
        'runbook' => null,
        'saved_query_id' => 'int64',
        'schedule' => null,
        'sematext_service' => null,
        'send_to_email' => null,
        'timezone' => null,
        'use_only_alert_rule_integrations' => null,
        'user_permissions' => null,
        'value_column_name' => null,
        'value_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_email' => 'accountEmail',
        'allowed_app_types' => 'allowedAppTypes',
        'analyzing_time' => 'analyzingTime',
        'app_display_state' => 'appDisplayState',
        'app_id' => 'appId',
        'app_name' => 'appName',
        'app_state' => 'appState',
        'app_token' => 'appToken',
        'app_type' => 'appType',
        'back_to_normal_needed' => 'backToNormalNeeded',
        'chart_key' => 'chartKey',
        'color' => 'color',
        'creator_email' => 'creatorEmail',
        'default_agg_type' => 'defaultAggType',
        'description' => 'description',
        'disallowed_app_types' => 'disallowedAppTypes',
        'enabled' => 'enabled',
        'estimate_operation' => 'estimateOperation',
        'estimate_value' => 'estimateValue',
        'filter_values' => 'filterValues',
        'filter_values_obj' => 'filterValuesObj',
        'ignore_regular_events_enabled' => 'ignoreRegularEventsEnabled',
        'integrations' => 'integrations',
        'last_data_received_date' => 'lastDataReceivedDate',
        'last_sent' => 'lastSent',
        'last_triggered' => 'lastTriggered',
        'metadata' => 'metadata',
        'metric_key' => 'metricKey',
        'metric_label' => 'metricLabel',
        'min_delay_between_notifications_in_minutes' => 'minDelayBetweenNotificationsInMinutes',
        'name' => 'name',
        'notification_emails' => 'notificationEmails',
        'notification_integrations' => 'notificationIntegrations',
        'notifications_enabled' => 'notificationsEnabled',
        'query' => 'query',
        'report_name' => 'reportName',
        'rule_key' => 'ruleKey',
        'rule_type' => 'ruleType',
        'runbook' => 'runbook',
        'saved_query_id' => 'savedQueryId',
        'schedule' => 'schedule',
        'sematext_service' => 'sematextService',
        'send_to_email' => 'sendToEmail',
        'timezone' => 'timezone',
        'use_only_alert_rule_integrations' => 'useOnlyAlertRuleIntegrations',
        'user_permissions' => 'userPermissions',
        'value_column_name' => 'valueColumnName',
        'value_name' => 'valueName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_email' => 'setAccountEmail',
        'allowed_app_types' => 'setAllowedAppTypes',
        'analyzing_time' => 'setAnalyzingTime',
        'app_display_state' => 'setAppDisplayState',
        'app_id' => 'setAppId',
        'app_name' => 'setAppName',
        'app_state' => 'setAppState',
        'app_token' => 'setAppToken',
        'app_type' => 'setAppType',
        'back_to_normal_needed' => 'setBackToNormalNeeded',
        'chart_key' => 'setChartKey',
        'color' => 'setColor',
        'creator_email' => 'setCreatorEmail',
        'default_agg_type' => 'setDefaultAggType',
        'description' => 'setDescription',
        'disallowed_app_types' => 'setDisallowedAppTypes',
        'enabled' => 'setEnabled',
        'estimate_operation' => 'setEstimateOperation',
        'estimate_value' => 'setEstimateValue',
        'filter_values' => 'setFilterValues',
        'filter_values_obj' => 'setFilterValuesObj',
        'ignore_regular_events_enabled' => 'setIgnoreRegularEventsEnabled',
        'integrations' => 'setIntegrations',
        'last_data_received_date' => 'setLastDataReceivedDate',
        'last_sent' => 'setLastSent',
        'last_triggered' => 'setLastTriggered',
        'metadata' => 'setMetadata',
        'metric_key' => 'setMetricKey',
        'metric_label' => 'setMetricLabel',
        'min_delay_between_notifications_in_minutes' => 'setMinDelayBetweenNotificationsInMinutes',
        'name' => 'setName',
        'notification_emails' => 'setNotificationEmails',
        'notification_integrations' => 'setNotificationIntegrations',
        'notifications_enabled' => 'setNotificationsEnabled',
        'query' => 'setQuery',
        'report_name' => 'setReportName',
        'rule_key' => 'setRuleKey',
        'rule_type' => 'setRuleType',
        'runbook' => 'setRunbook',
        'saved_query_id' => 'setSavedQueryId',
        'schedule' => 'setSchedule',
        'sematext_service' => 'setSematextService',
        'send_to_email' => 'setSendToEmail',
        'timezone' => 'setTimezone',
        'use_only_alert_rule_integrations' => 'setUseOnlyAlertRuleIntegrations',
        'user_permissions' => 'setUserPermissions',
        'value_column_name' => 'setValueColumnName',
        'value_name' => 'setValueName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_email' => 'getAccountEmail',
        'allowed_app_types' => 'getAllowedAppTypes',
        'analyzing_time' => 'getAnalyzingTime',
        'app_display_state' => 'getAppDisplayState',
        'app_id' => 'getAppId',
        'app_name' => 'getAppName',
        'app_state' => 'getAppState',
        'app_token' => 'getAppToken',
        'app_type' => 'getAppType',
        'back_to_normal_needed' => 'getBackToNormalNeeded',
        'chart_key' => 'getChartKey',
        'color' => 'getColor',
        'creator_email' => 'getCreatorEmail',
        'default_agg_type' => 'getDefaultAggType',
        'description' => 'getDescription',
        'disallowed_app_types' => 'getDisallowedAppTypes',
        'enabled' => 'getEnabled',
        'estimate_operation' => 'getEstimateOperation',
        'estimate_value' => 'getEstimateValue',
        'filter_values' => 'getFilterValues',
        'filter_values_obj' => 'getFilterValuesObj',
        'ignore_regular_events_enabled' => 'getIgnoreRegularEventsEnabled',
        'integrations' => 'getIntegrations',
        'last_data_received_date' => 'getLastDataReceivedDate',
        'last_sent' => 'getLastSent',
        'last_triggered' => 'getLastTriggered',
        'metadata' => 'getMetadata',
        'metric_key' => 'getMetricKey',
        'metric_label' => 'getMetricLabel',
        'min_delay_between_notifications_in_minutes' => 'getMinDelayBetweenNotificationsInMinutes',
        'name' => 'getName',
        'notification_emails' => 'getNotificationEmails',
        'notification_integrations' => 'getNotificationIntegrations',
        'notifications_enabled' => 'getNotificationsEnabled',
        'query' => 'getQuery',
        'report_name' => 'getReportName',
        'rule_key' => 'getRuleKey',
        'rule_type' => 'getRuleType',
        'runbook' => 'getRunbook',
        'saved_query_id' => 'getSavedQueryId',
        'schedule' => 'getSchedule',
        'sematext_service' => 'getSematextService',
        'send_to_email' => 'getSendToEmail',
        'timezone' => 'getTimezone',
        'use_only_alert_rule_integrations' => 'getUseOnlyAlertRuleIntegrations',
        'user_permissions' => 'getUserPermissions',
        'value_column_name' => 'getValueColumnName',
        'value_name' => 'getValueName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ESTIMATE_OPERATION_LESS = 'LESS';
    const ESTIMATE_OPERATION_MORE = 'MORE';
    const ESTIMATE_OPERATION_EQUAL = 'EQUAL';
    const ESTIMATE_OPERATION_UN_EQUAL = 'UN_EQUAL';
    const ESTIMATE_OPERATION_LESS_OR_EQUAL = 'LESS_OR_EQUAL';
    const ESTIMATE_OPERATION_MORE_OR_EQUAL = 'MORE_OR_EQUAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEstimateOperationAllowableValues()
    {
        return [
            self::ESTIMATE_OPERATION_LESS,
            self::ESTIMATE_OPERATION_MORE,
            self::ESTIMATE_OPERATION_EQUAL,
            self::ESTIMATE_OPERATION_UN_EQUAL,
            self::ESTIMATE_OPERATION_LESS_OR_EQUAL,
            self::ESTIMATE_OPERATION_MORE_OR_EQUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_email'] = isset($data['account_email']) ? $data['account_email'] : null;
        $this->container['allowed_app_types'] = isset($data['allowed_app_types']) ? $data['allowed_app_types'] : null;
        $this->container['analyzing_time'] = isset($data['analyzing_time']) ? $data['analyzing_time'] : null;
        $this->container['app_display_state'] = isset($data['app_display_state']) ? $data['app_display_state'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['app_state'] = isset($data['app_state']) ? $data['app_state'] : null;
        $this->container['app_token'] = isset($data['app_token']) ? $data['app_token'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['back_to_normal_needed'] = isset($data['back_to_normal_needed']) ? $data['back_to_normal_needed'] : null;
        $this->container['chart_key'] = isset($data['chart_key']) ? $data['chart_key'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['creator_email'] = isset($data['creator_email']) ? $data['creator_email'] : null;
        $this->container['default_agg_type'] = isset($data['default_agg_type']) ? $data['default_agg_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disallowed_app_types'] = isset($data['disallowed_app_types']) ? $data['disallowed_app_types'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['estimate_operation'] = isset($data['estimate_operation']) ? $data['estimate_operation'] : null;
        $this->container['estimate_value'] = isset($data['estimate_value']) ? $data['estimate_value'] : null;
        $this->container['filter_values'] = isset($data['filter_values']) ? $data['filter_values'] : null;
        $this->container['filter_values_obj'] = isset($data['filter_values_obj']) ? $data['filter_values_obj'] : null;
        $this->container['ignore_regular_events_enabled'] = isset($data['ignore_regular_events_enabled']) ? $data['ignore_regular_events_enabled'] : null;
        $this->container['integrations'] = isset($data['integrations']) ? $data['integrations'] : null;
        $this->container['last_data_received_date'] = isset($data['last_data_received_date']) ? $data['last_data_received_date'] : null;
        $this->container['last_sent'] = isset($data['last_sent']) ? $data['last_sent'] : null;
        $this->container['last_triggered'] = isset($data['last_triggered']) ? $data['last_triggered'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['metric_key'] = isset($data['metric_key']) ? $data['metric_key'] : null;
        $this->container['metric_label'] = isset($data['metric_label']) ? $data['metric_label'] : null;
        $this->container['min_delay_between_notifications_in_minutes'] = isset($data['min_delay_between_notifications_in_minutes']) ? $data['min_delay_between_notifications_in_minutes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notification_emails'] = isset($data['notification_emails']) ? $data['notification_emails'] : null;
        $this->container['notification_integrations'] = isset($data['notification_integrations']) ? $data['notification_integrations'] : null;
        $this->container['notifications_enabled'] = isset($data['notifications_enabled']) ? $data['notifications_enabled'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['report_name'] = isset($data['report_name']) ? $data['report_name'] : null;
        $this->container['rule_key'] = isset($data['rule_key']) ? $data['rule_key'] : null;
        $this->container['rule_type'] = isset($data['rule_type']) ? $data['rule_type'] : null;
        $this->container['runbook'] = isset($data['runbook']) ? $data['runbook'] : null;
        $this->container['saved_query_id'] = isset($data['saved_query_id']) ? $data['saved_query_id'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['sematext_service'] = isset($data['sematext_service']) ? $data['sematext_service'] : null;
        $this->container['send_to_email'] = isset($data['send_to_email']) ? $data['send_to_email'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['use_only_alert_rule_integrations'] = isset($data['use_only_alert_rule_integrations']) ? $data['use_only_alert_rule_integrations'] : null;
        $this->container['user_permissions'] = isset($data['user_permissions']) ? $data['user_permissions'] : null;
        $this->container['value_column_name'] = isset($data['value_column_name']) ? $data['value_column_name'] : null;
        $this->container['value_name'] = isset($data['value_name']) ? $data['value_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEstimateOperationAllowableValues();
        if (!is_null($this->container['estimate_operation']) && !in_array($this->container['estimate_operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'estimate_operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_email
     *
     * @return string
     */
    public function getAccountEmail()
    {
        return $this->container['account_email'];
    }

    /**
     * Sets account_email
     *
     * @param string $account_email account_email
     *
     * @return $this
     */
    public function setAccountEmail($account_email)
    {
        $this->container['account_email'] = $account_email;

        return $this;
    }

    /**
     * Gets allowed_app_types
     *
     * @return int[]
     */
    public function getAllowedAppTypes()
    {
        return $this->container['allowed_app_types'];
    }

    /**
     * Sets allowed_app_types
     *
     * @param int[] $allowed_app_types allowed_app_types
     *
     * @return $this
     */
    public function setAllowedAppTypes($allowed_app_types)
    {
        $this->container['allowed_app_types'] = $allowed_app_types;

        return $this;
    }

    /**
     * Gets analyzing_time
     *
     * @return string
     */
    public function getAnalyzingTime()
    {
        return $this->container['analyzing_time'];
    }

    /**
     * Sets analyzing_time
     *
     * @param string $analyzing_time analyzing_time
     *
     * @return $this
     */
    public function setAnalyzingTime($analyzing_time)
    {
        $this->container['analyzing_time'] = $analyzing_time;

        return $this;
    }

    /**
     * Gets app_display_state
     *
     * @return string
     */
    public function getAppDisplayState()
    {
        return $this->container['app_display_state'];
    }

    /**
     * Sets app_display_state
     *
     * @param string $app_display_state app_display_state
     *
     * @return $this
     */
    public function setAppDisplayState($app_display_state)
    {
        $this->container['app_display_state'] = $app_display_state;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name app_name
     *
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_state
     *
     * @return string
     */
    public function getAppState()
    {
        return $this->container['app_state'];
    }

    /**
     * Sets app_state
     *
     * @param string $app_state app_state
     *
     * @return $this
     */
    public function setAppState($app_state)
    {
        $this->container['app_state'] = $app_state;

        return $this;
    }

    /**
     * Gets app_token
     *
     * @return string
     */
    public function getAppToken()
    {
        return $this->container['app_token'];
    }

    /**
     * Sets app_token
     *
     * @param string $app_token app_token
     *
     * @return $this
     */
    public function setAppToken($app_token)
    {
        $this->container['app_token'] = $app_token;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type app_type
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets back_to_normal_needed
     *
     * @return bool
     */
    public function getBackToNormalNeeded()
    {
        return $this->container['back_to_normal_needed'];
    }

    /**
     * Sets back_to_normal_needed
     *
     * @param bool $back_to_normal_needed back_to_normal_needed
     *
     * @return $this
     */
    public function setBackToNormalNeeded($back_to_normal_needed)
    {
        $this->container['back_to_normal_needed'] = $back_to_normal_needed;

        return $this;
    }

    /**
     * Gets chart_key
     *
     * @return string
     */
    public function getChartKey()
    {
        return $this->container['chart_key'];
    }

    /**
     * Sets chart_key
     *
     * @param string $chart_key chart_key
     *
     * @return $this
     */
    public function setChartKey($chart_key)
    {
        $this->container['chart_key'] = $chart_key;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets creator_email
     *
     * @return string
     */
    public function getCreatorEmail()
    {
        return $this->container['creator_email'];
    }

    /**
     * Sets creator_email
     *
     * @param string $creator_email creator_email
     *
     * @return $this
     */
    public function setCreatorEmail($creator_email)
    {
        $this->container['creator_email'] = $creator_email;

        return $this;
    }

    /**
     * Gets default_agg_type
     *
     * @return string
     */
    public function getDefaultAggType()
    {
        return $this->container['default_agg_type'];
    }

    /**
     * Sets default_agg_type
     *
     * @param string $default_agg_type default_agg_type
     *
     * @return $this
     */
    public function setDefaultAggType($default_agg_type)
    {
        $this->container['default_agg_type'] = $default_agg_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disallowed_app_types
     *
     * @return int[]
     */
    public function getDisallowedAppTypes()
    {
        return $this->container['disallowed_app_types'];
    }

    /**
     * Sets disallowed_app_types
     *
     * @param int[] $disallowed_app_types disallowed_app_types
     *
     * @return $this
     */
    public function setDisallowedAppTypes($disallowed_app_types)
    {
        $this->container['disallowed_app_types'] = $disallowed_app_types;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets estimate_operation
     *
     * @return string
     */
    public function getEstimateOperation()
    {
        return $this->container['estimate_operation'];
    }

    /**
     * Sets estimate_operation
     *
     * @param string $estimate_operation estimate_operation
     *
     * @return $this
     */
    public function setEstimateOperation($estimate_operation)
    {
        $allowedValues = $this->getEstimateOperationAllowableValues();
        if (!is_null($estimate_operation) && !in_array($estimate_operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'estimate_operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['estimate_operation'] = $estimate_operation;

        return $this;
    }

    /**
     * Gets estimate_value
     *
     * @return double
     */
    public function getEstimateValue()
    {
        return $this->container['estimate_value'];
    }

    /**
     * Sets estimate_value
     *
     * @param double $estimate_value estimate_value
     *
     * @return $this
     */
    public function setEstimateValue($estimate_value)
    {
        $this->container['estimate_value'] = $estimate_value;

        return $this;
    }

    /**
     * Gets filter_values
     *
     * @return string
     */
    public function getFilterValues()
    {
        return $this->container['filter_values'];
    }

    /**
     * Sets filter_values
     *
     * @param string $filter_values filter_values
     *
     * @return $this
     */
    public function setFilterValues($filter_values)
    {
        $this->container['filter_values'] = $filter_values;

        return $this;
    }

    /**
     * Gets filter_values_obj
     *
     * @return \Swagger\Client\Model\FilterValue[]
     */
    public function getFilterValuesObj()
    {
        return $this->container['filter_values_obj'];
    }

    /**
     * Sets filter_values_obj
     *
     * @param \Swagger\Client\Model\FilterValue[] $filter_values_obj filter_values_obj
     *
     * @return $this
     */
    public function setFilterValuesObj($filter_values_obj)
    {
        $this->container['filter_values_obj'] = $filter_values_obj;

        return $this;
    }

    /**
     * Gets ignore_regular_events_enabled
     *
     * @return bool
     */
    public function getIgnoreRegularEventsEnabled()
    {
        return $this->container['ignore_regular_events_enabled'];
    }

    /**
     * Sets ignore_regular_events_enabled
     *
     * @param bool $ignore_regular_events_enabled ignore_regular_events_enabled
     *
     * @return $this
     */
    public function setIgnoreRegularEventsEnabled($ignore_regular_events_enabled)
    {
        $this->container['ignore_regular_events_enabled'] = $ignore_regular_events_enabled;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return string
     */
    public function getIntegrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param string $integrations integrations
     *
     * @return $this
     */
    public function setIntegrations($integrations)
    {
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets last_data_received_date
     *
     * @return int
     */
    public function getLastDataReceivedDate()
    {
        return $this->container['last_data_received_date'];
    }

    /**
     * Sets last_data_received_date
     *
     * @param int $last_data_received_date last_data_received_date
     *
     * @return $this
     */
    public function setLastDataReceivedDate($last_data_received_date)
    {
        $this->container['last_data_received_date'] = $last_data_received_date;

        return $this;
    }

    /**
     * Gets last_sent
     *
     * @return int
     */
    public function getLastSent()
    {
        return $this->container['last_sent'];
    }

    /**
     * Sets last_sent
     *
     * @param int $last_sent last_sent
     *
     * @return $this
     */
    public function setLastSent($last_sent)
    {
        $this->container['last_sent'] = $last_sent;

        return $this;
    }

    /**
     * Gets last_triggered
     *
     * @return int
     */
    public function getLastTriggered()
    {
        return $this->container['last_triggered'];
    }

    /**
     * Sets last_triggered
     *
     * @param int $last_triggered last_triggered
     *
     * @return $this
     */
    public function setLastTriggered($last_triggered)
    {
        $this->container['last_triggered'] = $last_triggered;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets metric_key
     *
     * @return string
     */
    public function getMetricKey()
    {
        return $this->container['metric_key'];
    }

    /**
     * Sets metric_key
     *
     * @param string $metric_key metric_key
     *
     * @return $this
     */
    public function setMetricKey($metric_key)
    {
        $this->container['metric_key'] = $metric_key;

        return $this;
    }

    /**
     * Gets metric_label
     *
     * @return string
     */
    public function getMetricLabel()
    {
        return $this->container['metric_label'];
    }

    /**
     * Sets metric_label
     *
     * @param string $metric_label metric_label
     *
     * @return $this
     */
    public function setMetricLabel($metric_label)
    {
        $this->container['metric_label'] = $metric_label;

        return $this;
    }

    /**
     * Gets min_delay_between_notifications_in_minutes
     *
     * @return string
     */
    public function getMinDelayBetweenNotificationsInMinutes()
    {
        return $this->container['min_delay_between_notifications_in_minutes'];
    }

    /**
     * Sets min_delay_between_notifications_in_minutes
     *
     * @param string $min_delay_between_notifications_in_minutes min_delay_between_notifications_in_minutes
     *
     * @return $this
     */
    public function setMinDelayBetweenNotificationsInMinutes($min_delay_between_notifications_in_minutes)
    {
        $this->container['min_delay_between_notifications_in_minutes'] = $min_delay_between_notifications_in_minutes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notification_emails
     *
     * @return string[]
     */
    public function getNotificationEmails()
    {
        return $this->container['notification_emails'];
    }

    /**
     * Sets notification_emails
     *
     * @param string[] $notification_emails notification_emails
     *
     * @return $this
     */
    public function setNotificationEmails($notification_emails)
    {
        $this->container['notification_emails'] = $notification_emails;

        return $this;
    }

    /**
     * Gets notification_integrations
     *
     * @return \Swagger\Client\Model\NotificationIntegration[]
     */
    public function getNotificationIntegrations()
    {
        return $this->container['notification_integrations'];
    }

    /**
     * Sets notification_integrations
     *
     * @param \Swagger\Client\Model\NotificationIntegration[] $notification_integrations notification_integrations
     *
     * @return $this
     */
    public function setNotificationIntegrations($notification_integrations)
    {
        $this->container['notification_integrations'] = $notification_integrations;

        return $this;
    }

    /**
     * Gets notifications_enabled
     *
     * @return bool
     */
    public function getNotificationsEnabled()
    {
        return $this->container['notifications_enabled'];
    }

    /**
     * Sets notifications_enabled
     *
     * @param bool $notifications_enabled notifications_enabled
     *
     * @return $this
     */
    public function setNotificationsEnabled($notifications_enabled)
    {
        $this->container['notifications_enabled'] = $notifications_enabled;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets report_name
     *
     * @return string
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name
     *
     * @param string $report_name report_name
     *
     * @return $this
     */
    public function setReportName($report_name)
    {
        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets rule_key
     *
     * @return int
     */
    public function getRuleKey()
    {
        return $this->container['rule_key'];
    }

    /**
     * Sets rule_key
     *
     * @param int $rule_key rule_key
     *
     * @return $this
     */
    public function setRuleKey($rule_key)
    {
        $this->container['rule_key'] = $rule_key;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string $rule_type rule_type
     *
     * @return $this
     */
    public function setRuleType($rule_type)
    {
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets runbook
     *
     * @return string
     */
    public function getRunbook()
    {
        return $this->container['runbook'];
    }

    /**
     * Sets runbook
     *
     * @param string $runbook runbook
     *
     * @return $this
     */
    public function setRunbook($runbook)
    {
        $this->container['runbook'] = $runbook;

        return $this;
    }

    /**
     * Gets saved_query_id
     *
     * @return int
     */
    public function getSavedQueryId()
    {
        return $this->container['saved_query_id'];
    }

    /**
     * Sets saved_query_id
     *
     * @param int $saved_query_id saved_query_id
     *
     * @return $this
     */
    public function setSavedQueryId($saved_query_id)
    {
        $this->container['saved_query_id'] = $saved_query_id;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Swagger\Client\Model\AlertRuleScheduleWeekdayDto[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Swagger\Client\Model\AlertRuleScheduleWeekdayDto[] $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets sematext_service
     *
     * @return string
     */
    public function getSematextService()
    {
        return $this->container['sematext_service'];
    }

    /**
     * Sets sematext_service
     *
     * @param string $sematext_service sematext_service
     *
     * @return $this
     */
    public function setSematextService($sematext_service)
    {
        $this->container['sematext_service'] = $sematext_service;

        return $this;
    }

    /**
     * Gets send_to_email
     *
     * @return string
     */
    public function getSendToEmail()
    {
        return $this->container['send_to_email'];
    }

    /**
     * Sets send_to_email
     *
     * @param string $send_to_email send_to_email
     *
     * @return $this
     */
    public function setSendToEmail($send_to_email)
    {
        $this->container['send_to_email'] = $send_to_email;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets use_only_alert_rule_integrations
     *
     * @return bool
     */
    public function getUseOnlyAlertRuleIntegrations()
    {
        return $this->container['use_only_alert_rule_integrations'];
    }

    /**
     * Sets use_only_alert_rule_integrations
     *
     * @param bool $use_only_alert_rule_integrations use_only_alert_rule_integrations
     *
     * @return $this
     */
    public function setUseOnlyAlertRuleIntegrations($use_only_alert_rule_integrations)
    {
        $this->container['use_only_alert_rule_integrations'] = $use_only_alert_rule_integrations;

        return $this;
    }

    /**
     * Gets user_permissions
     *
     * @return \Swagger\Client\Model\UserPermissions
     */
    public function getUserPermissions()
    {
        return $this->container['user_permissions'];
    }

    /**
     * Sets user_permissions
     *
     * @param \Swagger\Client\Model\UserPermissions $user_permissions user_permissions
     *
     * @return $this
     */
    public function setUserPermissions($user_permissions)
    {
        $this->container['user_permissions'] = $user_permissions;

        return $this;
    }

    /**
     * Gets value_column_name
     *
     * @return string
     */
    public function getValueColumnName()
    {
        return $this->container['value_column_name'];
    }

    /**
     * Sets value_column_name
     *
     * @param string $value_column_name value_column_name
     *
     * @return $this
     */
    public function setValueColumnName($value_column_name)
    {
        $this->container['value_column_name'] = $value_column_name;

        return $this;
    }

    /**
     * Gets value_name
     *
     * @return string
     */
    public function getValueName()
    {
        return $this->container['value_name'];
    }

    /**
     * Sets value_name
     *
     * @param string $value_name value_name
     *
     * @return $this
     */
    public function setValueName($value_name)
    {
        $this->container['value_name'] = $value_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


