<?php
/**
 * Plan
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use \ArrayAccess;
use \sematext\stcloud\ObjectSerializer;

/**
 * Plan Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Plan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_type' => 'string',
'custom' => 'bool',
'data_retention_hours' => 'float',
'default_trial_plan' => 'bool',
'free' => 'bool',
'free_trial_days' => 'int',
'id' => 'int',
'max_alerts' => 'int',
'max_daily_events' => 'int',
'name' => 'string',
'plan_scheme' => 'string',
'sematext_service' => 'string',
'trial_plan' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_type' => null,
'custom' => null,
'data_retention_hours' => null,
'default_trial_plan' => null,
'free' => null,
'free_trial_days' => 'int64',
'id' => 'int64',
'max_alerts' => 'int64',
'max_daily_events' => 'int64',
'name' => null,
'plan_scheme' => null,
'sematext_service' => null,
'trial_plan' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_type' => 'appType',
'custom' => 'custom',
'data_retention_hours' => 'dataRetentionHours',
'default_trial_plan' => 'defaultTrialPlan',
'free' => 'free',
'free_trial_days' => 'freeTrialDays',
'id' => 'id',
'max_alerts' => 'maxAlerts',
'max_daily_events' => 'maxDailyEvents',
'name' => 'name',
'plan_scheme' => 'planScheme',
'sematext_service' => 'sematextService',
'trial_plan' => 'trialPlan'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_type' => 'setAppType',
'custom' => 'setCustom',
'data_retention_hours' => 'setDataRetentionHours',
'default_trial_plan' => 'setDefaultTrialPlan',
'free' => 'setFree',
'free_trial_days' => 'setFreeTrialDays',
'id' => 'setId',
'max_alerts' => 'setMaxAlerts',
'max_daily_events' => 'setMaxDailyEvents',
'name' => 'setName',
'plan_scheme' => 'setPlanScheme',
'sematext_service' => 'setSematextService',
'trial_plan' => 'setTrialPlan'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_type' => 'getAppType',
'custom' => 'getCustom',
'data_retention_hours' => 'getDataRetentionHours',
'default_trial_plan' => 'getDefaultTrialPlan',
'free' => 'getFree',
'free_trial_days' => 'getFreeTrialDays',
'id' => 'getId',
'max_alerts' => 'getMaxAlerts',
'max_daily_events' => 'getMaxDailyEvents',
'name' => 'getName',
'plan_scheme' => 'getPlanScheme',
'sematext_service' => 'getSematextService',
'trial_plan' => 'getTrialPlan'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PLAN_SCHEME_SPM_1_0 = 'SPM_1_0';
const PLAN_SCHEME_SPM_2_0 = 'SPM_2_0';
const PLAN_SCHEME_SEARCHENE_1_0 = 'SEARCHENE_1_0';
const PLAN_SCHEME_LOGSENE_1_0 = 'LOGSENE_1_0';
const PLAN_SCHEME_LOGSENE_2_0 = 'LOGSENE_2_0';
const PLAN_SCHEME_RUM_1_0 = 'RUM_1_0';
const PLAN_SCHEME_RUM_1_1 = 'RUM_1_1';
const PLAN_SCHEME_RUM_EA = 'RUM_EA';
const PLAN_SCHEME_SYNTHETICS_EA = 'SYNTHETICS_EA';
const PLAN_SCHEME_SYNTHETICS_1_0 = 'SYNTHETICS_1_0';
const PLAN_SCHEME_BUGZ_EA = 'BUGZ_EA';
const SEMATEXT_SERVICE_LOGSENE = 'LOGSENE';
const SEMATEXT_SERVICE_SPM = 'SPM';
const SEMATEXT_SERVICE_RUM = 'RUM';
const SEMATEXT_SERVICE_SYNTHETICS = 'SYNTHETICS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanSchemeAllowableValues()
    {
        return [
            self::PLAN_SCHEME_SPM_1_0,
self::PLAN_SCHEME_SPM_2_0,
self::PLAN_SCHEME_SEARCHENE_1_0,
self::PLAN_SCHEME_LOGSENE_1_0,
self::PLAN_SCHEME_LOGSENE_2_0,
self::PLAN_SCHEME_RUM_1_0,
self::PLAN_SCHEME_RUM_1_1,
self::PLAN_SCHEME_RUM_EA,
self::PLAN_SCHEME_SYNTHETICS_EA,
self::PLAN_SCHEME_SYNTHETICS_1_0,
self::PLAN_SCHEME_BUGZ_EA,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSematextServiceAllowableValues()
    {
        return [
            self::SEMATEXT_SERVICE_LOGSENE,
self::SEMATEXT_SERVICE_SPM,
self::SEMATEXT_SERVICE_RUM,
self::SEMATEXT_SERVICE_SYNTHETICS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['custom'] = isset($data['custom']) ? $data['custom'] : null;
        $this->container['data_retention_hours'] = isset($data['data_retention_hours']) ? $data['data_retention_hours'] : null;
        $this->container['default_trial_plan'] = isset($data['default_trial_plan']) ? $data['default_trial_plan'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['free_trial_days'] = isset($data['free_trial_days']) ? $data['free_trial_days'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['max_alerts'] = isset($data['max_alerts']) ? $data['max_alerts'] : null;
        $this->container['max_daily_events'] = isset($data['max_daily_events']) ? $data['max_daily_events'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['plan_scheme'] = isset($data['plan_scheme']) ? $data['plan_scheme'] : null;
        $this->container['sematext_service'] = isset($data['sematext_service']) ? $data['sematext_service'] : null;
        $this->container['trial_plan'] = isset($data['trial_plan']) ? $data['trial_plan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlanSchemeAllowableValues();
        if (!is_null($this->container['plan_scheme']) && !in_array($this->container['plan_scheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'plan_scheme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSematextServiceAllowableValues();
        if (!is_null($this->container['sematext_service']) && !in_array($this->container['sematext_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sematext_service', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type app_type
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool $custom custom
     *
     * @return $this
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets data_retention_hours
     *
     * @return float
     */
    public function getDataRetentionHours()
    {
        return $this->container['data_retention_hours'];
    }

    /**
     * Sets data_retention_hours
     *
     * @param float $data_retention_hours data_retention_hours
     *
     * @return $this
     */
    public function setDataRetentionHours($data_retention_hours)
    {
        $this->container['data_retention_hours'] = $data_retention_hours;

        return $this;
    }

    /**
     * Gets default_trial_plan
     *
     * @return bool
     */
    public function getDefaultTrialPlan()
    {
        return $this->container['default_trial_plan'];
    }

    /**
     * Sets default_trial_plan
     *
     * @param bool $default_trial_plan default_trial_plan
     *
     * @return $this
     */
    public function setDefaultTrialPlan($default_trial_plan)
    {
        $this->container['default_trial_plan'] = $default_trial_plan;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool $free free
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets free_trial_days
     *
     * @return int
     */
    public function getFreeTrialDays()
    {
        return $this->container['free_trial_days'];
    }

    /**
     * Sets free_trial_days
     *
     * @param int $free_trial_days free_trial_days
     *
     * @return $this
     */
    public function setFreeTrialDays($free_trial_days)
    {
        $this->container['free_trial_days'] = $free_trial_days;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets max_alerts
     *
     * @return int
     */
    public function getMaxAlerts()
    {
        return $this->container['max_alerts'];
    }

    /**
     * Sets max_alerts
     *
     * @param int $max_alerts max_alerts
     *
     * @return $this
     */
    public function setMaxAlerts($max_alerts)
    {
        $this->container['max_alerts'] = $max_alerts;

        return $this;
    }

    /**
     * Gets max_daily_events
     *
     * @return int
     */
    public function getMaxDailyEvents()
    {
        return $this->container['max_daily_events'];
    }

    /**
     * Sets max_daily_events
     *
     * @param int $max_daily_events max_daily_events
     *
     * @return $this
     */
    public function setMaxDailyEvents($max_daily_events)
    {
        $this->container['max_daily_events'] = $max_daily_events;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan_scheme
     *
     * @return string
     */
    public function getPlanScheme()
    {
        return $this->container['plan_scheme'];
    }

    /**
     * Sets plan_scheme
     *
     * @param string $plan_scheme plan_scheme
     *
     * @return $this
     */
    public function setPlanScheme($plan_scheme)
    {
        $allowedValues = $this->getPlanSchemeAllowableValues();
        if (!is_null($plan_scheme) && !in_array($plan_scheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'plan_scheme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_scheme'] = $plan_scheme;

        return $this;
    }

    /**
     * Gets sematext_service
     *
     * @return string
     */
    public function getSematextService()
    {
        return $this->container['sematext_service'];
    }

    /**
     * Sets sematext_service
     *
     * @param string $sematext_service sematext_service
     *
     * @return $this
     */
    public function setSematextService($sematext_service)
    {
        $allowedValues = $this->getSematextServiceAllowableValues();
        if (!is_null($sematext_service) && !in_array($sematext_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sematext_service', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sematext_service'] = $sematext_service;

        return $this;
    }

    /**
     * Gets trial_plan
     *
     * @return bool
     */
    public function getTrialPlan()
    {
        return $this->container['trial_plan'];
    }

    /**
     * Sets trial_plan
     *
     * @param bool $trial_plan trial_plan
     *
     * @return $this
     */
    public function setTrialPlan($trial_plan)
    {
        $this->container['trial_plan'] = $trial_plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
