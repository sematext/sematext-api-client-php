<?php
/**
 * DayUsageData
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use ArrayAccess;
use sematext\stcloud\ObjectSerializer;

/**
 * DayUsageData Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DayUsageData implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DayUsageData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count_daily_data_points' => 'int',
    'day' => 'string',
    'discount' => 'float',
    'dpm_per_container_host_quota' => 'int',
    'dpm_per_host_quota' => 'int',
    'fixed_monthly_price' => 'float',
    'fixed_monthly_price_per_hour' => 'float',
    'free_containers_per_host' => 'int',
    'id' => 'int',
    'kilo_dpm_overage_price_per_hour' => 'float',
    'plan_type' => 'string',
    'price_per_container_host_hour' => 'float',
    'price_per_container_hour' => 'float',
    'price_per_server_hour' => 'float',
    'sum_number_of_container_hosts' => 'int',
    'sum_number_of_containers' => 'int',
    'sum_number_of_servers' => 'int',
    'usage_amount' => 'float',
    'used_plan' => 'string',
    'user_discount' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count_daily_data_points' => 'int32',
    'day' => null,
    'discount' => null,
    'dpm_per_container_host_quota' => 'int64',
    'dpm_per_host_quota' => 'int64',
    'fixed_monthly_price' => null,
    'fixed_monthly_price_per_hour' => null,
    'free_containers_per_host' => 'int32',
    'id' => 'int64',
    'kilo_dpm_overage_price_per_hour' => null,
    'plan_type' => null,
    'price_per_container_host_hour' => null,
    'price_per_container_hour' => null,
    'price_per_server_hour' => null,
    'sum_number_of_container_hosts' => 'int32',
    'sum_number_of_containers' => 'int32',
    'sum_number_of_servers' => 'int32',
    'usage_amount' => null,
    'used_plan' => null,
    'user_discount' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count_daily_data_points' => 'countDailyDataPoints',
    'day' => 'day',
    'discount' => 'discount',
    'dpm_per_container_host_quota' => 'dpmPerContainerHostQuota',
    'dpm_per_host_quota' => 'dpmPerHostQuota',
    'fixed_monthly_price' => 'fixedMonthlyPrice',
    'fixed_monthly_price_per_hour' => 'fixedMonthlyPricePerHour',
    'free_containers_per_host' => 'freeContainersPerHost',
    'id' => 'id',
    'kilo_dpm_overage_price_per_hour' => 'kiloDpmOveragePricePerHour',
    'plan_type' => 'planType',
    'price_per_container_host_hour' => 'pricePerContainerHostHour',
    'price_per_container_hour' => 'pricePerContainerHour',
    'price_per_server_hour' => 'pricePerServerHour',
    'sum_number_of_container_hosts' => 'sumNumberOfContainerHosts',
    'sum_number_of_containers' => 'sumNumberOfContainers',
    'sum_number_of_servers' => 'sumNumberOfServers',
    'usage_amount' => 'usageAmount',
    'used_plan' => 'usedPlan',
    'user_discount' => 'userDiscount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count_daily_data_points' => 'setCountDailyDataPoints',
    'day' => 'setDay',
    'discount' => 'setDiscount',
    'dpm_per_container_host_quota' => 'setDpmPerContainerHostQuota',
    'dpm_per_host_quota' => 'setDpmPerHostQuota',
    'fixed_monthly_price' => 'setFixedMonthlyPrice',
    'fixed_monthly_price_per_hour' => 'setFixedMonthlyPricePerHour',
    'free_containers_per_host' => 'setFreeContainersPerHost',
    'id' => 'setId',
    'kilo_dpm_overage_price_per_hour' => 'setKiloDpmOveragePricePerHour',
    'plan_type' => 'setPlanType',
    'price_per_container_host_hour' => 'setPricePerContainerHostHour',
    'price_per_container_hour' => 'setPricePerContainerHour',
    'price_per_server_hour' => 'setPricePerServerHour',
    'sum_number_of_container_hosts' => 'setSumNumberOfContainerHosts',
    'sum_number_of_containers' => 'setSumNumberOfContainers',
    'sum_number_of_servers' => 'setSumNumberOfServers',
    'usage_amount' => 'setUsageAmount',
    'used_plan' => 'setUsedPlan',
    'user_discount' => 'setUserDiscount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count_daily_data_points' => 'getCountDailyDataPoints',
    'day' => 'getDay',
    'discount' => 'getDiscount',
    'dpm_per_container_host_quota' => 'getDpmPerContainerHostQuota',
    'dpm_per_host_quota' => 'getDpmPerHostQuota',
    'fixed_monthly_price' => 'getFixedMonthlyPrice',
    'fixed_monthly_price_per_hour' => 'getFixedMonthlyPricePerHour',
    'free_containers_per_host' => 'getFreeContainersPerHost',
    'id' => 'getId',
    'kilo_dpm_overage_price_per_hour' => 'getKiloDpmOveragePricePerHour',
    'plan_type' => 'getPlanType',
    'price_per_container_host_hour' => 'getPricePerContainerHostHour',
    'price_per_container_hour' => 'getPricePerContainerHour',
    'price_per_server_hour' => 'getPricePerServerHour',
    'sum_number_of_container_hosts' => 'getSumNumberOfContainerHosts',
    'sum_number_of_containers' => 'getSumNumberOfContainers',
    'sum_number_of_servers' => 'getSumNumberOfServers',
    'usage_amount' => 'getUsageAmount',
    'used_plan' => 'getUsedPlan',
    'user_discount' => 'getUserDiscount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const PLAN_TYPE_INFRA = 'INFRA';
    public const PLAN_TYPE_PER_AGENT = 'PER_AGENT';
    public const PLAN_TYPE_FIXED_PRICE = 'FIXED_PRICE';
    public const PLAN_TYPE_PER_VOLUME = 'PER_VOLUME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanTypeAllowableValues()
    {
        return [
            self::PLAN_TYPE_INFRA,
        self::PLAN_TYPE_PER_AGENT,
        self::PLAN_TYPE_FIXED_PRICE,
        self::PLAN_TYPE_PER_VOLUME,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count_daily_data_points'] = isset($data['count_daily_data_points']) ? $data['count_daily_data_points'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['dpm_per_container_host_quota'] = isset($data['dpm_per_container_host_quota']) ? $data['dpm_per_container_host_quota'] : null;
        $this->container['dpm_per_host_quota'] = isset($data['dpm_per_host_quota']) ? $data['dpm_per_host_quota'] : null;
        $this->container['fixed_monthly_price'] = isset($data['fixed_monthly_price']) ? $data['fixed_monthly_price'] : null;
        $this->container['fixed_monthly_price_per_hour'] = isset($data['fixed_monthly_price_per_hour']) ? $data['fixed_monthly_price_per_hour'] : null;
        $this->container['free_containers_per_host'] = isset($data['free_containers_per_host']) ? $data['free_containers_per_host'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kilo_dpm_overage_price_per_hour'] = isset($data['kilo_dpm_overage_price_per_hour']) ? $data['kilo_dpm_overage_price_per_hour'] : null;
        $this->container['plan_type'] = isset($data['plan_type']) ? $data['plan_type'] : null;
        $this->container['price_per_container_host_hour'] = isset($data['price_per_container_host_hour']) ? $data['price_per_container_host_hour'] : null;
        $this->container['price_per_container_hour'] = isset($data['price_per_container_hour']) ? $data['price_per_container_hour'] : null;
        $this->container['price_per_server_hour'] = isset($data['price_per_server_hour']) ? $data['price_per_server_hour'] : null;
        $this->container['sum_number_of_container_hosts'] = isset($data['sum_number_of_container_hosts']) ? $data['sum_number_of_container_hosts'] : null;
        $this->container['sum_number_of_containers'] = isset($data['sum_number_of_containers']) ? $data['sum_number_of_containers'] : null;
        $this->container['sum_number_of_servers'] = isset($data['sum_number_of_servers']) ? $data['sum_number_of_servers'] : null;
        $this->container['usage_amount'] = isset($data['usage_amount']) ? $data['usage_amount'] : null;
        $this->container['used_plan'] = isset($data['used_plan']) ? $data['used_plan'] : null;
        $this->container['user_discount'] = isset($data['user_discount']) ? $data['user_discount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlanTypeAllowableValues();
        if (!is_null($this->container['plan_type']) && !in_array($this->container['plan_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'plan_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count_daily_data_points
     *
     * @return int
     */
    public function getCountDailyDataPoints()
    {
        return $this->container['count_daily_data_points'];
    }

    /**
     * Sets count_daily_data_points
     *
     * @param int $count_daily_data_points count_daily_data_points
     *
     * @return $this
     */
    public function setCountDailyDataPoints($count_daily_data_points)
    {
        $this->container['count_daily_data_points'] = $count_daily_data_points;

        return $this;
    }

    /**
     * Gets day
     *
     * @return string
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param string $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets dpm_per_container_host_quota
     *
     * @return int
     */
    public function getDpmPerContainerHostQuota()
    {
        return $this->container['dpm_per_container_host_quota'];
    }

    /**
     * Sets dpm_per_container_host_quota
     *
     * @param int $dpm_per_container_host_quota dpm_per_container_host_quota
     *
     * @return $this
     */
    public function setDpmPerContainerHostQuota($dpm_per_container_host_quota)
    {
        $this->container['dpm_per_container_host_quota'] = $dpm_per_container_host_quota;

        return $this;
    }

    /**
     * Gets dpm_per_host_quota
     *
     * @return int
     */
    public function getDpmPerHostQuota()
    {
        return $this->container['dpm_per_host_quota'];
    }

    /**
     * Sets dpm_per_host_quota
     *
     * @param int $dpm_per_host_quota dpm_per_host_quota
     *
     * @return $this
     */
    public function setDpmPerHostQuota($dpm_per_host_quota)
    {
        $this->container['dpm_per_host_quota'] = $dpm_per_host_quota;

        return $this;
    }

    /**
     * Gets fixed_monthly_price
     *
     * @return float
     */
    public function getFixedMonthlyPrice()
    {
        return $this->container['fixed_monthly_price'];
    }

    /**
     * Sets fixed_monthly_price
     *
     * @param float $fixed_monthly_price fixed_monthly_price
     *
     * @return $this
     */
    public function setFixedMonthlyPrice($fixed_monthly_price)
    {
        $this->container['fixed_monthly_price'] = $fixed_monthly_price;

        return $this;
    }

    /**
     * Gets fixed_monthly_price_per_hour
     *
     * @return float
     */
    public function getFixedMonthlyPricePerHour()
    {
        return $this->container['fixed_monthly_price_per_hour'];
    }

    /**
     * Sets fixed_monthly_price_per_hour
     *
     * @param float $fixed_monthly_price_per_hour fixed_monthly_price_per_hour
     *
     * @return $this
     */
    public function setFixedMonthlyPricePerHour($fixed_monthly_price_per_hour)
    {
        $this->container['fixed_monthly_price_per_hour'] = $fixed_monthly_price_per_hour;

        return $this;
    }

    /**
     * Gets free_containers_per_host
     *
     * @return int
     */
    public function getFreeContainersPerHost()
    {
        return $this->container['free_containers_per_host'];
    }

    /**
     * Sets free_containers_per_host
     *
     * @param int $free_containers_per_host free_containers_per_host
     *
     * @return $this
     */
    public function setFreeContainersPerHost($free_containers_per_host)
    {
        $this->container['free_containers_per_host'] = $free_containers_per_host;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kilo_dpm_overage_price_per_hour
     *
     * @return float
     */
    public function getKiloDpmOveragePricePerHour()
    {
        return $this->container['kilo_dpm_overage_price_per_hour'];
    }

    /**
     * Sets kilo_dpm_overage_price_per_hour
     *
     * @param float $kilo_dpm_overage_price_per_hour kilo_dpm_overage_price_per_hour
     *
     * @return $this
     */
    public function setKiloDpmOveragePricePerHour($kilo_dpm_overage_price_per_hour)
    {
        $this->container['kilo_dpm_overage_price_per_hour'] = $kilo_dpm_overage_price_per_hour;

        return $this;
    }

    /**
     * Gets plan_type
     *
     * @return string
     */
    public function getPlanType()
    {
        return $this->container['plan_type'];
    }

    /**
     * Sets plan_type
     *
     * @param string $plan_type plan_type
     *
     * @return $this
     */
    public function setPlanType($plan_type)
    {
        $allowedValues = $this->getPlanTypeAllowableValues();
        if (!is_null($plan_type) && !in_array($plan_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'plan_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_type'] = $plan_type;

        return $this;
    }

    /**
     * Gets price_per_container_host_hour
     *
     * @return float
     */
    public function getPricePerContainerHostHour()
    {
        return $this->container['price_per_container_host_hour'];
    }

    /**
     * Sets price_per_container_host_hour
     *
     * @param float $price_per_container_host_hour price_per_container_host_hour
     *
     * @return $this
     */
    public function setPricePerContainerHostHour($price_per_container_host_hour)
    {
        $this->container['price_per_container_host_hour'] = $price_per_container_host_hour;

        return $this;
    }

    /**
     * Gets price_per_container_hour
     *
     * @return float
     */
    public function getPricePerContainerHour()
    {
        return $this->container['price_per_container_hour'];
    }

    /**
     * Sets price_per_container_hour
     *
     * @param float $price_per_container_hour price_per_container_hour
     *
     * @return $this
     */
    public function setPricePerContainerHour($price_per_container_hour)
    {
        $this->container['price_per_container_hour'] = $price_per_container_hour;

        return $this;
    }

    /**
     * Gets price_per_server_hour
     *
     * @return float
     */
    public function getPricePerServerHour()
    {
        return $this->container['price_per_server_hour'];
    }

    /**
     * Sets price_per_server_hour
     *
     * @param float $price_per_server_hour price_per_server_hour
     *
     * @return $this
     */
    public function setPricePerServerHour($price_per_server_hour)
    {
        $this->container['price_per_server_hour'] = $price_per_server_hour;

        return $this;
    }

    /**
     * Gets sum_number_of_container_hosts
     *
     * @return int
     */
    public function getSumNumberOfContainerHosts()
    {
        return $this->container['sum_number_of_container_hosts'];
    }

    /**
     * Sets sum_number_of_container_hosts
     *
     * @param int $sum_number_of_container_hosts sum_number_of_container_hosts
     *
     * @return $this
     */
    public function setSumNumberOfContainerHosts($sum_number_of_container_hosts)
    {
        $this->container['sum_number_of_container_hosts'] = $sum_number_of_container_hosts;

        return $this;
    }

    /**
     * Gets sum_number_of_containers
     *
     * @return int
     */
    public function getSumNumberOfContainers()
    {
        return $this->container['sum_number_of_containers'];
    }

    /**
     * Sets sum_number_of_containers
     *
     * @param int $sum_number_of_containers sum_number_of_containers
     *
     * @return $this
     */
    public function setSumNumberOfContainers($sum_number_of_containers)
    {
        $this->container['sum_number_of_containers'] = $sum_number_of_containers;

        return $this;
    }

    /**
     * Gets sum_number_of_servers
     *
     * @return int
     */
    public function getSumNumberOfServers()
    {
        return $this->container['sum_number_of_servers'];
    }

    /**
     * Sets sum_number_of_servers
     *
     * @param int $sum_number_of_servers sum_number_of_servers
     *
     * @return $this
     */
    public function setSumNumberOfServers($sum_number_of_servers)
    {
        $this->container['sum_number_of_servers'] = $sum_number_of_servers;

        return $this;
    }

    /**
     * Gets usage_amount
     *
     * @return float
     */
    public function getUsageAmount()
    {
        return $this->container['usage_amount'];
    }

    /**
     * Sets usage_amount
     *
     * @param float $usage_amount usage_amount
     *
     * @return $this
     */
    public function setUsageAmount($usage_amount)
    {
        $this->container['usage_amount'] = $usage_amount;

        return $this;
    }

    /**
     * Gets used_plan
     *
     * @return string
     */
    public function getUsedPlan()
    {
        return $this->container['used_plan'];
    }

    /**
     * Sets used_plan
     *
     * @param string $used_plan used_plan
     *
     * @return $this
     */
    public function setUsedPlan($used_plan)
    {
        $this->container['used_plan'] = $used_plan;

        return $this;
    }

    /**
     * Gets user_discount
     *
     * @return float
     */
    public function getUserDiscount()
    {
        return $this->container['user_discount'];
    }

    /**
     * Sets user_discount
     *
     * @param float $user_discount user_discount
     *
     * @return $this
     */
    public function setUserDiscount($user_discount)
    {
        $this->container['user_discount'] = $user_discount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
