<?php
/**
 * ChargesDetailsResponseDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use ArrayAccess;
use sematext\stcloud\ObjectSerializer;

/**
 * ChargesDetailsResponseDto Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargesDetailsResponseDto implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargesDetailsResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app' => '\sematext\stcloud\Model\App',
    'charge_base' => 'string',
    'day_usage_data' => '\sematext\stcloud\Model\DayUsageData[]',
    'monthly_fee_amount' => 'float',
    'period_fee_periods' => '\sematext\stcloud\Model\MinPeriodFeePeriod[]',
    'total_amount' => 'float',
    'usage_amount' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app' => null,
    'charge_base' => null,
    'day_usage_data' => null,
    'monthly_fee_amount' => null,
    'period_fee_periods' => null,
    'total_amount' => null,
    'usage_amount' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app' => 'app',
    'charge_base' => 'chargeBase',
    'day_usage_data' => 'dayUsageData',
    'monthly_fee_amount' => 'monthlyFeeAmount',
    'period_fee_periods' => 'periodFeePeriods',
    'total_amount' => 'totalAmount',
    'usage_amount' => 'usageAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app' => 'setApp',
    'charge_base' => 'setChargeBase',
    'day_usage_data' => 'setDayUsageData',
    'monthly_fee_amount' => 'setMonthlyFeeAmount',
    'period_fee_periods' => 'setPeriodFeePeriods',
    'total_amount' => 'setTotalAmount',
    'usage_amount' => 'setUsageAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app' => 'getApp',
    'charge_base' => 'getChargeBase',
    'day_usage_data' => 'getDayUsageData',
    'monthly_fee_amount' => 'getMonthlyFeeAmount',
    'period_fee_periods' => 'getPeriodFeePeriods',
    'total_amount' => 'getTotalAmount',
    'usage_amount' => 'getUsageAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const CHARGE_BASE_SUMMARIZED_USAGE = 'SUMMARIZED_USAGE';
    public const CHARGE_BASE_MIN_MONTHLY_FEE = 'MIN_MONTHLY_FEE';
    public const CHARGE_BASE_SUM_OF_DAILY_FEES = 'SUM_OF_DAILY_FEES';
    public const CHARGE_BASE_TOTAL_MONTHLY_FEE = 'TOTAL_MONTHLY_FEE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeBaseAllowableValues()
    {
        return [
            self::CHARGE_BASE_SUMMARIZED_USAGE,
        self::CHARGE_BASE_MIN_MONTHLY_FEE,
        self::CHARGE_BASE_SUM_OF_DAILY_FEES,
        self::CHARGE_BASE_TOTAL_MONTHLY_FEE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app'] = isset($data['app']) ? $data['app'] : null;
        $this->container['charge_base'] = isset($data['charge_base']) ? $data['charge_base'] : null;
        $this->container['day_usage_data'] = isset($data['day_usage_data']) ? $data['day_usage_data'] : null;
        $this->container['monthly_fee_amount'] = isset($data['monthly_fee_amount']) ? $data['monthly_fee_amount'] : null;
        $this->container['period_fee_periods'] = isset($data['period_fee_periods']) ? $data['period_fee_periods'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['usage_amount'] = isset($data['usage_amount']) ? $data['usage_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChargeBaseAllowableValues();
        if (!is_null($this->container['charge_base']) && !in_array($this->container['charge_base'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_base', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app
     *
     * @return \sematext\stcloud\Model\App
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param \sematext\stcloud\Model\App $app app
     *
     * @return $this
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets charge_base
     *
     * @return string
     */
    public function getChargeBase()
    {
        return $this->container['charge_base'];
    }

    /**
     * Sets charge_base
     *
     * @param string $charge_base charge_base
     *
     * @return $this
     */
    public function setChargeBase($charge_base)
    {
        $allowedValues = $this->getChargeBaseAllowableValues();
        if (!is_null($charge_base) && !in_array($charge_base, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_base', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_base'] = $charge_base;

        return $this;
    }

    /**
     * Gets day_usage_data
     *
     * @return \sematext\stcloud\Model\DayUsageData[]
     */
    public function getDayUsageData()
    {
        return $this->container['day_usage_data'];
    }

    /**
     * Sets day_usage_data
     *
     * @param \sematext\stcloud\Model\DayUsageData[] $day_usage_data day_usage_data
     *
     * @return $this
     */
    public function setDayUsageData($day_usage_data)
    {
        $this->container['day_usage_data'] = $day_usage_data;

        return $this;
    }

    /**
     * Gets monthly_fee_amount
     *
     * @return float
     */
    public function getMonthlyFeeAmount()
    {
        return $this->container['monthly_fee_amount'];
    }

    /**
     * Sets monthly_fee_amount
     *
     * @param float $monthly_fee_amount monthly_fee_amount
     *
     * @return $this
     */
    public function setMonthlyFeeAmount($monthly_fee_amount)
    {
        $this->container['monthly_fee_amount'] = $monthly_fee_amount;

        return $this;
    }

    /**
     * Gets period_fee_periods
     *
     * @return \sematext\stcloud\Model\MinPeriodFeePeriod[]
     */
    public function getPeriodFeePeriods()
    {
        return $this->container['period_fee_periods'];
    }

    /**
     * Sets period_fee_periods
     *
     * @param \sematext\stcloud\Model\MinPeriodFeePeriod[] $period_fee_periods period_fee_periods
     *
     * @return $this
     */
    public function setPeriodFeePeriods($period_fee_periods)
    {
        $this->container['period_fee_periods'] = $period_fee_periods;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets usage_amount
     *
     * @return float
     */
    public function getUsageAmount()
    {
        return $this->container['usage_amount'];
    }

    /**
     * Sets usage_amount
     *
     * @param float $usage_amount usage_amount
     *
     * @return $this
     */
    public function setUsageAmount($usage_amount)
    {
        $this->container['usage_amount'] = $usage_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
