<?php
/**
 * DailyDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use \ArrayAccess;
use \sematext\stcloud\ObjectSerializer;

/**
 * DailyDto Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DailyDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DailyDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'day' => 'int',
'failed' => 'int',
'ingested_count' => 'int',
'ingested_volume' => 'int',
'stored_count' => 'int',
'stored_volume' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'day' => 'int64',
'failed' => 'int64',
'ingested_count' => 'int64',
'ingested_volume' => 'int64',
'stored_count' => 'int64',
'stored_volume' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day' => 'day',
'failed' => 'failed',
'ingested_count' => 'ingestedCount',
'ingested_volume' => 'ingestedVolume',
'stored_count' => 'storedCount',
'stored_volume' => 'storedVolume'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day' => 'setDay',
'failed' => 'setFailed',
'ingested_count' => 'setIngestedCount',
'ingested_volume' => 'setIngestedVolume',
'stored_count' => 'setStoredCount',
'stored_volume' => 'setStoredVolume'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day' => 'getDay',
'failed' => 'getFailed',
'ingested_count' => 'getIngestedCount',
'ingested_volume' => 'getIngestedVolume',
'stored_count' => 'getStoredCount',
'stored_volume' => 'getStoredVolume'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['ingested_count'] = isset($data['ingested_count']) ? $data['ingested_count'] : null;
        $this->container['ingested_volume'] = isset($data['ingested_volume']) ? $data['ingested_volume'] : null;
        $this->container['stored_count'] = isset($data['stored_count']) ? $data['stored_count'] : null;
        $this->container['stored_volume'] = isset($data['stored_volume']) ? $data['stored_volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day
     *
     * @return int
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param int $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return int
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param int $failed failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets ingested_count
     *
     * @return int
     */
    public function getIngestedCount()
    {
        return $this->container['ingested_count'];
    }

    /**
     * Sets ingested_count
     *
     * @param int $ingested_count ingested_count
     *
     * @return $this
     */
    public function setIngestedCount($ingested_count)
    {
        $this->container['ingested_count'] = $ingested_count;

        return $this;
    }

    /**
     * Gets ingested_volume
     *
     * @return int
     */
    public function getIngestedVolume()
    {
        return $this->container['ingested_volume'];
    }

    /**
     * Sets ingested_volume
     *
     * @param int $ingested_volume ingested_volume
     *
     * @return $this
     */
    public function setIngestedVolume($ingested_volume)
    {
        $this->container['ingested_volume'] = $ingested_volume;

        return $this;
    }

    /**
     * Gets stored_count
     *
     * @return int
     */
    public function getStoredCount()
    {
        return $this->container['stored_count'];
    }

    /**
     * Sets stored_count
     *
     * @param int $stored_count stored_count
     *
     * @return $this
     */
    public function setStoredCount($stored_count)
    {
        $this->container['stored_count'] = $stored_count;

        return $this;
    }

    /**
     * Gets stored_volume
     *
     * @return int
     */
    public function getStoredVolume()
    {
        return $this->container['stored_volume'];
    }

    /**
     * Sets stored_volume
     *
     * @param int $stored_volume stored_volume
     *
     * @return $this
     */
    public function setStoredVolume($stored_volume)
    {
        $this->container['stored_volume'] = $stored_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
