<?php
/**
 * ServiceIntegration
 *
 * PHP version 5
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sematext Cloud API
 *
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sematext\stcloud\Model;

use \ArrayAccess;
use \sematext\stcloud\ObjectSerializer;

/**
 * ServiceIntegration Class Doc Comment
 *
 * @category Class
 * @package  sematext\stcloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceIntegration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceIntegration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_type_id' => 'int',
'app_type_name' => 'string',
'display_name' => 'string',
'enabled' => 'bool',
'external_product_id' => 'int',
'external_product_name' => 'string',
'id' => 'int',
'integration_type' => 'string',
'ordinal' => 'int',
'parent_integration_id' => 'int',
'sematext_service' => 'string',
'visible' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_type_id' => 'int64',
'app_type_name' => null,
'display_name' => null,
'enabled' => null,
'external_product_id' => 'int64',
'external_product_name' => null,
'id' => 'int64',
'integration_type' => null,
'ordinal' => 'int32',
'parent_integration_id' => 'int64',
'sematext_service' => null,
'visible' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_type_id' => 'appTypeId',
'app_type_name' => 'appTypeName',
'display_name' => 'displayName',
'enabled' => 'enabled',
'external_product_id' => 'externalProductId',
'external_product_name' => 'externalProductName',
'id' => 'id',
'integration_type' => 'integrationType',
'ordinal' => 'ordinal',
'parent_integration_id' => 'parentIntegrationId',
'sematext_service' => 'sematextService',
'visible' => 'visible'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_type_id' => 'setAppTypeId',
'app_type_name' => 'setAppTypeName',
'display_name' => 'setDisplayName',
'enabled' => 'setEnabled',
'external_product_id' => 'setExternalProductId',
'external_product_name' => 'setExternalProductName',
'id' => 'setId',
'integration_type' => 'setIntegrationType',
'ordinal' => 'setOrdinal',
'parent_integration_id' => 'setParentIntegrationId',
'sematext_service' => 'setSematextService',
'visible' => 'setVisible'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_type_id' => 'getAppTypeId',
'app_type_name' => 'getAppTypeName',
'display_name' => 'getDisplayName',
'enabled' => 'getEnabled',
'external_product_id' => 'getExternalProductId',
'external_product_name' => 'getExternalProductName',
'id' => 'getId',
'integration_type' => 'getIntegrationType',
'ordinal' => 'getOrdinal',
'parent_integration_id' => 'getParentIntegrationId',
'sematext_service' => 'getSematextService',
'visible' => 'getVisible'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_type_id'] = isset($data['app_type_id']) ? $data['app_type_id'] : null;
        $this->container['app_type_name'] = isset($data['app_type_name']) ? $data['app_type_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['external_product_id'] = isset($data['external_product_id']) ? $data['external_product_id'] : null;
        $this->container['external_product_name'] = isset($data['external_product_name']) ? $data['external_product_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['integration_type'] = isset($data['integration_type']) ? $data['integration_type'] : null;
        $this->container['ordinal'] = isset($data['ordinal']) ? $data['ordinal'] : null;
        $this->container['parent_integration_id'] = isset($data['parent_integration_id']) ? $data['parent_integration_id'] : null;
        $this->container['sematext_service'] = isset($data['sematext_service']) ? $data['sematext_service'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_type_id
     *
     * @return int
     */
    public function getAppTypeId()
    {
        return $this->container['app_type_id'];
    }

    /**
     * Sets app_type_id
     *
     * @param int $app_type_id app_type_id
     *
     * @return $this
     */
    public function setAppTypeId($app_type_id)
    {
        $this->container['app_type_id'] = $app_type_id;

        return $this;
    }

    /**
     * Gets app_type_name
     *
     * @return string
     */
    public function getAppTypeName()
    {
        return $this->container['app_type_name'];
    }

    /**
     * Sets app_type_name
     *
     * @param string $app_type_name app_type_name
     *
     * @return $this
     */
    public function setAppTypeName($app_type_name)
    {
        $this->container['app_type_name'] = $app_type_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets external_product_id
     *
     * @return int
     */
    public function getExternalProductId()
    {
        return $this->container['external_product_id'];
    }

    /**
     * Sets external_product_id
     *
     * @param int $external_product_id external_product_id
     *
     * @return $this
     */
    public function setExternalProductId($external_product_id)
    {
        $this->container['external_product_id'] = $external_product_id;

        return $this;
    }

    /**
     * Gets external_product_name
     *
     * @return string
     */
    public function getExternalProductName()
    {
        return $this->container['external_product_name'];
    }

    /**
     * Sets external_product_name
     *
     * @param string $external_product_name external_product_name
     *
     * @return $this
     */
    public function setExternalProductName($external_product_name)
    {
        $this->container['external_product_name'] = $external_product_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration_type
     *
     * @return string
     */
    public function getIntegrationType()
    {
        return $this->container['integration_type'];
    }

    /**
     * Sets integration_type
     *
     * @param string $integration_type integration_type
     *
     * @return $this
     */
    public function setIntegrationType($integration_type)
    {
        $this->container['integration_type'] = $integration_type;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int
     */
    public function getOrdinal()
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int $ordinal ordinal
     *
     * @return $this
     */
    public function setOrdinal($ordinal)
    {
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets parent_integration_id
     *
     * @return int
     */
    public function getParentIntegrationId()
    {
        return $this->container['parent_integration_id'];
    }

    /**
     * Sets parent_integration_id
     *
     * @param int $parent_integration_id parent_integration_id
     *
     * @return $this
     */
    public function setParentIntegrationId($parent_integration_id)
    {
        $this->container['parent_integration_id'] = $parent_integration_id;

        return $this;
    }

    /**
     * Gets sematext_service
     *
     * @return string
     */
    public function getSematextService()
    {
        return $this->container['sematext_service'];
    }

    /**
     * Sets sematext_service
     *
     * @param string $sematext_service sematext_service
     *
     * @return $this
     */
    public function setSematextService($sematext_service)
    {
        $this->container['sematext_service'] = $sematext_service;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
